---
title: "Reading Journey"
listing:
  contents:
    - "book-*.qmd"
  type: table
  sort-ui: [reading.start, title, reading.end]
  filter-ui: true
  fields: [title, reading.start, reading.end]
  field-display-names:
    reading.end: "Ended"
    reading.start: "Started"
format:
  html:
    code-fold: true
jupyter: python3
description: Reading journey and notes about books
creator: "@victorgeislinger"
---

## Summary of Reading

```{python}
# | echo: false
%run _help_reading.py
import pandas as pd
import numpy as np
import matplotlib as mlp
from matplotlib import patheffects as pe
import datetime

df = pd.read_csv(
  'https://github.com/MrGeislinger/victorsothervector/raw/main/'
  'data/reading/all_reading-clean.csv'
)
df.start = pd.to_datetime(
    df.start,
    format='%Y-%m-%d %H:%M:%S',
)
df.end = pd.to_datetime(
    df.end,
    format='%Y-%m-%d %H:%M:%S',
)

years = sorted(df.start.dt.year.unique().tolist())

# Create the path effect for outlines
black_stroke_effect = pe.withStroke(
    linewidth=1,
    foreground='black',
)
white_stroke_effect = pe.withStroke(
    linewidth=1,
    foreground='white',
)
```

```{python}
# | echo: false
# | label: fig-total-reading-time-past-years
# | fig-cap: "Reading done for all books recorded (past years)"
fig, axs = plt.subplots(
    nrows=len(years)-1,
    sharex=True,
    figsize=(8, 4),
)


for year,ax in zip(years[:-1], axs):
    df_pivot = get_year_data(df, year=year)

    Weekday, Week = np.mgrid[:df_pivot.shape[0]+1, :df_pivot.shape[1]+1]
    extreme_value = df_pivot.values.mean() + 3*df_pivot.values.std() 

    cmap = (plt.get_cmap('Greens')).copy()
    cmap.set_under('#EAEDF0')
    ax.set_aspect("equal")
    ax.pcolormesh(
        Week,
        Weekday,
        df_pivot.values,
        cmap=cmap,
        edgecolor="w",
        vmin=1/3600. / 2,   # more than half-second
        vmax=extreme_value, # Color darkest to max
    )
    ax.set_xlim(0, df_pivot.shape[1])

    ax.set_yticks(
        [0.5,1.5,2.5,3.5,4.5,5.5,6.5],
        ['Mo','Tu','We','Th','Fr','Sa','Su',][::-1],
    )
    n_books = sum(df.groupby(['title'])['start'].min().dt.year == year)


    ax.set_title(
        f'{year}: Read {n_books} Books over {df_pivot.values.sum():.1f}hrs',
        path_effects=[black_stroke_effect],
        color='white',
    )

    # Spines
    ax.spines[['right', 'top']].set_visible(False)
    ax.spines.left.set(
      path_effects=[white_stroke_effect],
      color='black',
    )
    ax.spines.bottom.set(
      path_effects=[white_stroke_effect],
      color='black',
    )

    # Axis labels & ticks    
    ax.set_xticks([])
    ax.set_xticklabels(
        ax.get_xticklabels(),
        path_effects=[black_stroke_effect],
        color='white',
    )
    ax.set_yticklabels(
        ax.get_yticklabels(),
        path_effects=[black_stroke_effect],
        color='white',        
    )

fig.autofmt_xdate()
plt.tight_layout()
fig.patch.set_visible(False)
```

```{python}
# | echo: false
# | label: fig-total-reading-time-current-year
# | fig-cap: "Reading done for all books recorded in current year"
year = years[-1]
fig, ax = plt.subplots(
    nrows=1,
    sharex=True,
    figsize=(8, 2),
)
df_pivot = get_year_data(df, year=year)

cal_pos = datetime.date.today().isocalendar()
today_week_num = cal_pos.week
present_data = df_pivot[list(range(1, today_week_num))].stack()

extreme_value = present_data.mean() + 3*present_data.std() 

Weekday, Week = np.mgrid[:df_pivot.shape[0]+1, :df_pivot.shape[1]+1]
cmap = (plt.get_cmap('Greens')).copy()
cmap.set_under('#EAEDF0')
ax.set_aspect("equal")
ax.pcolormesh(
    Week,
    Weekday,
    df_pivot.values,
    cmap=cmap,
    edgecolor="w",
    vmin=1/3600. / 2,   # more than half-second
    vmax=extreme_value, # Color darkest to max
)
ax.set_xlim(0, df_pivot.shape[1])

ax.set_yticks(
    [0.5,1.5,2.5,3.5,4.5,5.5,6.5],
    ['Mo','Tu','We','Th','Fr','Sa','Su',][::-1],
)

n_books = sum(df.groupby(['title'])['start'].min().dt.year == year)

ax.set_title(
    f'{year}: Read {n_books} Books over {df_pivot.values.sum():.1f}hrs',
    path_effects=[black_stroke_effect],
    color='white',
)
    
# Spines
ax.spines[['right', 'top']].set_visible(False)
ax.spines.left.set(
  path_effects=[white_stroke_effect],
  color='black',
)
ax.spines.bottom.set(
  path_effects=[white_stroke_effect],
  color='black',
)

# Axis labels & ticks    
ax.set_xticks([])
ax.set_xticklabels(
    ax.get_xticklabels(),
    path_effects=[black_stroke_effect],
    color='white',
)
ax.set_yticklabels(
    ax.get_yticklabels(),
    path_effects=[black_stroke_effect],
    color='white',        
)

fig.autofmt_xdate()
plt.tight_layout()
fig.patch.set_visible(False)
```